import{ab as n,C as s,D as a,ad as t}from"./framework-e618a78f.js";const e={},p=t(`<h2 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a> Switch 语句</h2><p>使用 <code>switch</code> 语句，而不是编写 <strong>许多</strong> <code>if..else</code> 语句。</p><p><code>switch</code> 语句选择要执行的许多代码块之一：</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> 整型数值<span class="token number">1</span><span class="token operator">:</span>
    <span class="token comment">// 代码块 1</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> 整型数值<span class="token number">2</span><span class="token operator">:</span>
    <span class="token comment">// 代码块 2</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token comment">// 代码块 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是它的工作原理：</p><ul><li><code>switch</code> 表达式被计算一次</li><li>将表达式的值与每个 <code>case</code> 的值进行比较</li><li>如果匹配，则执行关联的代码块</li><li><code>break</code> 语句跳出 switch 块并停止执行</li><li><code>default</code> 语句是可选的，指定在没有大小写匹配时运行的一些代码</li></ul><p>下面的示例使用工作日编号来计算工作日名称：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;周日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出 -&gt; &quot;周四&quot; (day 4)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中断关键字-break" tabindex="-1"><a class="header-anchor" href="#中断关键字-break" aria-hidden="true">#</a> 中断关键字 break</h2><p>当 C 到达一个 <code>break</code> 关键字时，它会跳出 <code>switch</code> 块。</p><p>这将停止在块内执行更多代码和案例测试。</p><p>找到匹配项并完成工作后，就该休息一下了。 无需进行更多测试。</p><p>中断可以节省大量执行时间，因为它“忽略”了 switch 块中所有其余代码的执行。</p><h2 id="默认关键字-default" tabindex="-1"><a class="header-anchor" href="#默认关键字-default" aria-hidden="true">#</a> 默认关键字 default</h2><p><code>default</code> 关键字指定在没有大小写匹配时运行的一些代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;今天是星期六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;今天是星期日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">break</span><span class="token punctuation">;</span>
	  <span class="token keyword">default</span><span class="token operator">:</span>
	    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;期待周末&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出 -&gt; &quot;期待周末&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> <code>switch</code> 中的最后一条语句必须使用 <code>default</code> 关键字，并且不需要 <code>break</code>。<code>default</code> 不是必须的。当没有 <code>default</code> 时，如果所有 <code>case</code> 都匹配失败，那么就什么都不执行。</p><h2 id="关键字-case" tabindex="-1"><a class="header-anchor" href="#关键字-case" aria-hidden="true">#</a> 关键字 case</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ✅ 💯 正确</span>
<span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ✅ 💯 正确</span>
<span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span><span class="token operator">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ✅ 💯 正确，字符和整数可以相互转换</span>
<span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span><span class="token operator">+</span><span class="token number">19</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ✅ 💯 正确，字符和整数可以相互转换</span>
<span class="token keyword">case</span> <span class="token number">9.5</span><span class="token operator">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ❌ 错误，不能为小数</span>
<span class="token keyword">case</span> a<span class="token operator">:</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ❌ 错误，不能包含变量</span>
<span class="token keyword">case</span> a<span class="token operator">+</span><span class="token number">10</span><span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">// ❌ 错误，不能包含变量</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","02 Switch语句.html.vue"]]);export{r as default};
