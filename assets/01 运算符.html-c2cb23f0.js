import{ab as n,C as s,D as t,ad as a}from"./framework-e618a78f.js";const e={},p=a(`<h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>算术运算符用于执行常见的数学运算。</p><table><thead><tr><th>Operator</th><th>Name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>+</td><td>加 Addition</td><td>将两个值相加</td><td>x + y</td></tr><tr><td>-</td><td>减 Subtraction</td><td>从另一个值中减去一个值</td><td>x - y</td></tr><tr><td>*</td><td>乘 Multiplication</td><td>将两个值相乘</td><td>x * y</td></tr><tr><td>/</td><td>除 Division</td><td>将一个值除以另一个</td><td>x / y</td></tr><tr><td>%</td><td>取模 Modulus</td><td>返回除法余数</td><td>x % y</td></tr><tr><td>++</td><td>增量 Increment</td><td>将变量的值增加 1</td><td>++x</td></tr><tr><td>--</td><td>乘量 Decrement</td><td>将变量的值减 1</td><td>--x</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>++</code>运算符分为前自增，后自增<br><code>--</code>运算符分为前自减，后自减</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;后自增%d\\n&quot;</span> <span class="token punctuation">,</span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span> <span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;前自增%d\\n&quot;</span> <span class="token punctuation">,</span> <span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>赋值运算符用于为变量赋值。</p><p>在下面的示例中，我们使用 <strong>赋值</strong> 运算符 (<code>=</code>) 将值 <strong>10</strong> 分配给名为 <strong>x</strong> 的变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>加法赋值</strong>运算符 (<code>+=</code>) 将值添加到变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
x <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所有赋值运算符的列表：</p><table><thead><tr><th>符号</th><th>示例</th><th>如同</th></tr></thead><tbody><tr><td>=</td><td>x = 5</td><td>x = 5</td></tr><tr><td>+=</td><td>x += 3</td><td>x = x + 3</td></tr><tr><td>-=</td><td>x -= 3</td><td>x = x - 3</td></tr><tr><td>*=</td><td>x *= 3</td><td>x = x * 3</td></tr><tr><td>/=</td><td>x /= 3</td><td>x = x / 3</td></tr><tr><td>%=</td><td>x %= 3</td><td>x = x % 3</td></tr><tr><td>&amp;=</td><td>x &amp;= 3</td><td>x = x &amp; 3</td></tr><tr><td>|=</td><td>x |= 3</td><td>x = x | 3</td></tr><tr><td>^=</td><td>x ^= 3</td><td>x = x ^ 3</td></tr><tr><td>&gt;&gt;=</td><td>x &gt;&gt;= 3</td><td>x = x &gt;&gt; 3</td></tr><tr><td>&lt;&lt;=</td><td>x &lt;&lt;= 3</td><td>x = x &lt;&lt; 3</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//a += 2;</span>
    <span class="token comment">//a = a + 2;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span> <span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>比较运算符用于比较两个值。</p><p><strong>注意：</strong> 比较的返回值为 true (<code>1</code>) 或 false (<code>0</code>)。</p><p>在以下示例中，我们使用 <strong>大于</strong> 运算符 (<code>&gt;</code>) 来确定 5 是否大于 3：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 1（真），因为 5 大于 3</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有比较运算符的列表：</p><table><thead><tr><th>符号</th><th>名称</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>x == y</td></tr><tr><td>!=</td><td>不等于</td><td>x != y</td></tr><tr><td>&gt;</td><td>大于</td><td>x &gt; y</td></tr><tr><td>&lt;</td><td>小于</td><td>x &lt; y</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>x &gt;= y</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>x &lt;= y</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p>逻辑运算符用于确定变量或值之间的逻辑：</p><table><thead><tr><th>符号</th><th>名称</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与逻辑</td><td>如果两个语句都为真，则返回真</td><td>x &lt; 5 &amp;&amp; x &lt; 10</td></tr><tr><td>||</td><td>或逻辑</td><td>如果其中一个语句为真，则返回真</td><td>x &lt; 5 || x &lt; 4</td></tr><tr><td>!</td><td>非逻辑</td><td>反转结果，如果结果为真则返回假</td><td>!(x &lt; 5 &amp;&amp; x &lt; 10)</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> x <span class="token operator">&gt;</span> y <span class="token operator">&amp;&amp;</span> z <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 1（真）</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> x <span class="token operator">&gt;</span> y <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 0（假）</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&amp;</code></td><td style="text-align:left;">按位与操作，按二进制位进行&quot;与&quot;运算</td><td style="text-align:left;"><code>(A &amp; B)</code> 将得到 <code>12</code> 即为 0000 1100</td></tr><tr><td style="text-align:left;"><code>|</code></td><td style="text-align:left;">按位或运算符，按二进制位进行&quot;或&quot;运算</td><td style="text-align:left;"><code>(A | B)</code> 将得到 <code>61</code> 即为 0011 1101</td></tr><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">异或运算符，按二进制位进行&quot;异或&quot;运算</td><td style="text-align:left;"><code>(A ^ B)</code> 将得到 <code>49</code> 即为 0011 0001</td></tr><tr><td style="text-align:left;"><code>~</code></td><td style="text-align:left;">取反运算符，按二进制位进行&quot;取反&quot;运算</td><td style="text-align:left;"><code>(~A)</code> 将得到 <code>-61</code> 即为 1100 0011</td></tr><tr><td style="text-align:left;"><code>&lt;&lt;</code></td><td style="text-align:left;">二进制左移运算符</td><td style="text-align:left;"><code>A &lt;&lt; 2</code> 将得到 <code>240</code> 即为 1111 0000</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;</code></td><td style="text-align:left;">二进制右移运算符</td><td style="text-align:left;"><code>A &gt;&gt; 2</code> 将得到 <code>15</code> 即为 0000 1111</td></tr><tr><td style="text-align:left;">下面的实例，了解 C 语言中所有可用的位运算符</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment">/* 60 = 0011 1100 */</span>  
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token comment">/* 13 = 0000 1101 */</span>
  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           

  c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>       <span class="token comment">/* 12 = 0000 1100 */</span> 
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line 1 - c 的值是 %d\\n&quot;</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>

  c <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>       <span class="token comment">/* 61 = 0011 1101 */</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line 2 - c 的值是 %d\\n&quot;</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>

  c <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>       <span class="token comment">/* 49 = 0011 0001 */</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line 3 - c 的值是 %d\\n&quot;</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>

  c <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>          <span class="token comment">/*-61 = 1100 0011 */</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line 4 - c 的值是 %d\\n&quot;</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>

  c <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">/* 240 = 1111 0000 */</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line 5 - c 的值是 %d\\n&quot;</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>

  c <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">/* 15 = 0000 1111 */</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line 6 - c 的值是 %d\\n&quot;</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当上面的代码被编译和执行时，它会产生下列结果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Line <span class="token number">1</span> <span class="token operator">-</span> c 的值是 <span class="token number">12</span>
Line <span class="token number">2</span> <span class="token operator">-</span> c 的值是 <span class="token number">61</span>
Line <span class="token number">3</span> <span class="token operator">-</span> c 的值是 <span class="token number">49</span>
Line <span class="token number">4</span> <span class="token operator">-</span> c 的值是 <span class="token operator">-</span><span class="token number">61</span>
Line <span class="token number">5</span> <span class="token operator">-</span> c 的值是 <span class="token number">240</span>
Line <span class="token number">6</span> <span class="token operator">-</span> c 的值是 <span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[p];function c(d,l){return s(),t("div",null,o)}const r=n(e,[["render",c],["__file","01 运算符.html.vue"]]);export{r as default};
